<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.minboard.mapper.CommentsMapper">

    <resultMap id="commentsDtoResultMap" type="commentsDto">
        <result property="commentsGroup" column="comments_group"/>
        <result property="commentsDepth" column="comments_depth" />
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="delYn" column="del_yn"/>
        <result property="boardId" column="board_id"/>
    </resultMap>

    <resultMap id="commentsUpdateVoResultMap" type="commentsUpdateVo">
        <result property="createTime" column="create_time"/>
        <result property="delYn" column="del_yn"/>
        <result property="boardId" column="board_id"/>
    </resultMap>

    <insert id="insertComments"
            parameterType="commentsSaveVo"
            useGeneratedKeys ="true"
            keyProperty="id">

        insert into
            comments(
                        contents,
                        comments_group,
                        comments_depth,
                        sort,
                        create_time,
                        board_id
        )values(
                        #{contents},
                        #{commentsGroup},
                        #{commentsDepth},
                        #{sort},
                        #{createTime},
                        #{boardId}

                   )
    </insert>

    <select id="getBoardHierarchicalCommentsList" resultType="commentsDto" resultMap="commentsDtoResultMap" >
            select
                id
                 , contents
                 , comments_group
                 , sort
                 , comments_depth
                 , create_time
                 , update_time
                 , board_id
                 , del_yn

            from comments

            where
                board_id  = #{id} and del_yn = 'N'

            order by
                comments_group asc
                , sort asc;

    </select>

    <update id="commentsReplySortUpdate" parameterType="commentsReplySaveVo">
        update comments

        set
            sort = #{sort} + 1

        where comments_group = #{commentsGroup}
          and sort > #{sort}
          and board_id = ${boardId}
    </update>

    <update id="updateComments" parameterType="commentsUpdateVo">
        update comments

        set
                contents = #{contents}
                , update_time = #{updateTime}

        where
                id = #{id} and del_yn = 'N'
    </update>

    <update id="deleteComments" parameterType="commentsDto">
        update comments

        set
            del_yn = 'Y'

        where
            id = #{id} and del_yn = 'N'
    </update>

    <update id="deleteAllComments" parameterType="int">
        update
            comments

        set
            del_yn = 'Y'

        where
            board_id = #{boardId} and del_yn = 'N'
    </update>

    <!--댓글의 답글 작성하기-->
    <insert id="insertCommentsReply"
            keyProperty="id"
            parameterType="commentsReplySaveVo"
            useGeneratedKeys ="true"
    >
        insert into
            comments(
                    contents
                    , create_time
                    , board_id
                    , sort
                    , comments_group
                    , comments_depth
        )values(
                   #{contents}
                   , #{createTime}
                   , #{boardId}
                   , #{sort}
                   , #{commentsGroup}
                   , #{commentsDepth}
               )

    </insert>

    <update id="insertCommentsSetGroup" parameterType="commentsSaveVo">
        update comments
        
        set comments_group = #{id}
        
        where
            board_id = #{boardId}
          and id = #{id}
          and del_yn = 'N';
    </update>

    <select id="hierarchicalCalculationFormula" resultType="int" >
        select
               ifnull(min(sort), 0)
        from
                comments
        where
                comments_group = ${commentsGroup}
          and sort > ${sort}
          and comments_depth <![CDATA[ <= ]]> ${commentsDepth};
    </select>

    <select id="calculationFormulaResultZero" resultType="int">
        select
                ifnull(max(sort), 0) + 1
        from
                comments
        where
                comments_group = ${commentsGroup};
    </select>

    <insert id="insertResultZero" parameterType="commentsReplySaveVo">
        insert into comments(
                    contents
                    , create_time
                    , board_id
                    , sort
                    , comments_group
                    , comments_depth
        )values(
                   #{contents}
                   , #{createTime}
                   , #{boardId}
                   , #{sort}
                   , #{commentsGroup}
                   , #{commentsDepth} + 1)
    </insert>

    <insert id="insertResultNotZero" parameterType="commentsReplySaveVo">
        insert into comments(
                    contents
                    , create_time
                    , board_id
                    , sort
                    , comments_group
                    , comments_depth
        )values(
                       #{contents}
                       , #{createTime}
                       , #{boardId}
                       , #{sort}
                       , #{commentsGroup}
                       , #{commentsDepth} + 1
               )
    </insert>

    <update id="calculationFormulaResultNotZero" parameterType="commentsReplySaveVo">
        update comments
        set
                sort = sort + 1
        where
                comments_group =  #{commentsGroup}  and sort <![CDATA[ >= ]]>  #{sort};
    </update>

    <update id="decreaseSort" parameterType="commentsDto">
        update comments
        set
                sort = sort - 1
        where
                comments_group =  ${commentsGroup}  and sort > ${sort};

    </update>
</mapper>