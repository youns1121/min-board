<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.minboard.mapper.CommentsMapper">

    <resultMap id="CommentsDtoResultMap" type="CommentsDto">
        <result property="commentGroup" column="comment_group"/>
        <result property="commentDepth" column="comment_depth" />
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="delYn" column="del_yn"/>
        <result property="boardId" column="board_id"/>
    </resultMap>

    <resultMap id="CommentsUpdateVoResultMap" type="CommentsUpdateVo">
        <result property="createTime" column="create_time"/>
        <result property="delYn" column="del_yn"/>
        <result property="boardId" column="board_id"/>
    </resultMap>

    <!--- 댓글 생성하기  -->
    <insert id="insertComments"
            parameterType="CommentsSaveVo"
            useGeneratedKeys ="true"
            keyProperty="id">

        INSERT INTO
            comments(
                        contents,
                        comment_group,
                        comment_depth,
                        create_time,
                        board_id
        )VALUES(
                        #{contents},
                        #{commentGroup},
                        #{commentDepth},
                        #{createTime},
                        #{boardId}

                   )
    </insert>

    <!--댓글 전체보기-->
    <select id="getBoardCommentsList" resultType="CommentsDto" resultMap="CommentsDtoResultMap" >
        SELECT
               id,
               contents,
               del_yn,
               comment_group,
               comment_depth,
               create_time,
               update_time,
               board_id

        FROM
               comments

        WHERE
               board_id = #{id} AND del_yn = 'N'

    </select>

    <!-- 댓글 계층형 전체보기 -->
<!--    <select id="getBoardHierarchicalCommentsList" resultType="CommentsDto" resultMap="CommentsDtoResultMap" >-->
<!--        WITH RECURSIVE CTE AS (-->
<!--            SELECT-->
<!--                    id-->
<!--                    ,contents-->
<!--                    ,comment_group-->
<!--                    ,comment_depth-->
<!--                    ,create_time-->
<!--                    ,update_time-->
<!--                    ,del_yn-->
<!--                    ,CAST(id as CHAR(100)) path-->
<!--            FROM-->
<!--                    comments-->
<!--            WHERE-->
<!--                    comment_group = 0-->
<!--              AND board_id  = #{boardId}-->
<!--              AND del_yn = 'N'-->

<!--            UNION ALL-->

<!--            SELECT-->
<!--                     t.id-->
<!--                     ,t.contents-->
<!--                     ,t.comment_group-->
<!--                     ,t.comment_depth-->
<!--                     ,t.create_time-->
<!--                     ,t.update_time-->
<!--                     ,t.del_yn-->
<!--                     ,CONCAT(t2.path, ',', t.id) AS path-->
<!--            FROM-->
<!--                     comments AS t-->
<!--                     INNER JOIN CTE AS t2 ON t.comment_group = t2.id-->
<!--        )-->
<!--        SELECT-->
<!--                     id-->
<!--                     ,CONCAT(REPEAT('Re) ', comment_depth), contents) AS contents-->
<!--                     ,comment_group-->
<!--                     ,comment_depth-->
<!--                     ,create_time-->
<!--                     ,update_time-->
<!--                     ,del_yn-->
<!--                     ,path-->

<!--        FROM CTE-->

<!--        WHERE del_yn = 'N'-->

<!--        ORDER BY path-->

<!--    </select>-->

    <select id="getBoardHierarchicalCommentsList" resultType="CommentsDto" resultMap="CommentsDtoResultMap" >
            SELECT
                id
                 ,contents
                 ,comment_group
                 ,sort
                 ,comment_depth
                 ,create_time
                 ,update_time
                 ,board_id
                 ,del_yn
            FROM
                comments
            WHERE
                       board_id  = #{id}
                      AND del_yn = 'N'
            ORDER BY comment_group ASC , sort ASC;

    </select>

    <update id="CommentsReplySortUpdate" parameterType="CommentsReplySaveVo">
        update
            comments
        set
            sort = #{sort} + 1
        where comment_group = #{commentGroup}
          and sort > #{sort}
          and board_id = ${boardId}
    </update>

    <select id="findBySameGroupYn" resultType="int" >
        SELECT
                max(sort)
        FROM
                comments
        WHERE
                board_id  = ${boardId}
                AND comment_group = #{commentGroup}
                AND comment_depth = #{commentDepth}
                AND del_yn = 'N'
    </select>


    <!--댓글 수정하기-->
    <update id="updateComments" parameterType="CommentsUpdateVo">
        UPDATE
                comments

        SET
                contents = #{contents},
                update_time = #{updateTime}

        WHERE
                id = #{id} AND del_yn = 'N'
    </update>

    <!--댓글 수정 페이지-->
    <select id="getUpdateComments" resultType="CommentsDto" resultMap="CommentsDtoResultMap">
        SELECT
                id,
                contents,
                create_time,
                del_yn,
                board_id

        FROM
                comments

        WHERE
                id = #{id} AND del_yn = 'N'

    </select>

    <!--댓글 삭제하기-->
    <update id="deleteComment" parameterType="int">
        UPDATE
            comments

        SET
            del_yn = 'Y'

        WHERE
            id = #{id} AND del_yn = 'N'
    </update>

    <!--게시글의 모든댓글 삭제하기-->
    <update id="deleteAllComment" parameterType="int">
        UPDATE
            comments

        SET
            del_yn = 'Y'

        WHERE
            board_id = #{boardId} AND del_yn = 'N'
    </update>

    <!--댓글의 답글 작성하기-->
    <insert id="insertCommentsReply"
            keyProperty="id"
            parameterType="CommentsReplySaveVo"
            useGeneratedKeys ="true"
    >
        INSERT INTO
            comments(

                    contents,
                    create_time,
                    board_id,
                    sort,
                    comment_group,
                    comment_depth
        )VALUES(
                   #{contents},
                   #{createTime},
                   #{boardId},
                   #{sort},
                   #{commentGroup},
                   #{commentDepth}
               )

    </insert>

    <update id="insertCommentsSetGroup" parameterType="CommentsReplySaveVo">
        update
            comments
        set sort = sort + 1
        where
            comment_group = #{comment_group}
          and sort > #{sort}
          and board_id = #{boardId};
    </update>

    <!--댓글갯수 카운트-->
    <select id="getBoardCommentsTotalCount" resultType="Integer">
        SELECT count(*)
        FROM comments
        WHERE board_id = #{boardId} AND del_yn = 'N'
    </select>

</mapper>